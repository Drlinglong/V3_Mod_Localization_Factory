# scripts/core/proofreading_tracker.py
import os
import logging
import csv
from typing import List, Dict, Any
from scripts.config import DEST_DIR, LANGUAGES


class ProofreadingTracker:
    """校对进度追踪器，用于生成校对进度看板"""
    
    # 多语言文本模板
    MULTILANG_TEMPLATES = {
        "en": {
            "title": "Proofreading Progress Board for {mod_name} Mod Localization",
            "status": "Status",
            "source_file": "Source File",
            "localized_file": "Localized File", 
            "translated_lines": "Translated Lines",
            "notes": "Notes/Progress",
            "instructions": "Instructions",
            "status_instruction": "**Status Column**: Use 'X' to mark as completed, leave empty for incomplete",
            "notes_instruction": "**Notes Column**: Fill in proofreading progress, such as:",
            "progress_examples": [
                "Proofread to line 150",
                "Style needs unification", 
                "Completed",
                "Found terminology issues"
            ],
            "sorting_instruction": "**File Sorting**: Sorted by source file path alphabetically for easy lookup",
            "line_count_instruction": "**Line Count**: Shows actual translated text lines in each file",
            "priority_suggestions": "Priority Suggestions",
            "priority_1": "**Priority 1**: Proofread {filename} first ({lines} lines, most content)",
            "priority_2": "**Priority 2**: Proofread {filename} ({lines} lines)",
            "priority_3": "**Priority 3**: Proofread {filename} ({lines} lines)",
            "priority_4": "**Priority 4**: Proofread other files",
            "terminology_focus": "Terminology Check Focus",
            "ensure_terms": "Ensure the following terms are correctly translated:",
            "check_accuracy": "Check accuracy of other professional terms",
            "generated_by": "This file was automatically generated by V3_Mod_Localization_Factory at {time}",
            "csv_filename": "proofreading_progress.csv"
        },
        "zh-CN": {
            "title": "《{mod_name}》汉化校对进度看板",
            "status": "状态",
            "source_file": "源文件",
            "localized_file": "汉化文件",
            "translated_lines": "已翻译行数", 
            "notes": "校对进度/备注",
            "instructions": "使用说明",
            "status_instruction": "**状态列**: 使用'X'标记为已完成，留空表示未完成",
            "notes_instruction": "**校对进度/备注列**: 可填写校对进度信息，如：",
            "progress_examples": [
                "校对到150行",
                "风格待统一",
                "已完成",
                "发现术语问题"
            ],
            "sorting_instruction": "**文件排序**: 按源文件路径字母顺序排列，便于查找",
            "line_count_instruction": "**行数统计**: 显示每个文件中实际被翻译的文本行数",
            "priority_suggestions": "校对建议",
            "priority_1": "**优先级1**: 先校对 {filename} ({lines}行，内容最多)",
            "priority_2": "**优先级2**: 校对 {filename} ({lines}行)",
            "priority_3": "**优先级3**: 校对 {filename} ({lines}行)",
            "priority_4": "**优先级4**: 校对其他文件",
            "terminology_focus": "术语检查重点",
            "ensure_terms": "确保以下术语翻译正确：",
            "check_accuracy": "检查其他专业术语翻译准确性",
            "generated_by": "本文件由V3_Mod_Localization_Factory自动生成于 {time}",
            "csv_filename": "校对进度表.csv"
        },
        "fr": {
            "title": "Tableau de Progression de Relecture pour la Localisation du Mod {mod_name}",
            "status": "Statut",
            "source_file": "Fichier Source",
            "localized_file": "Fichier Localisé",
            "translated_lines": "Lignes Traduites",
            "notes": "Notes/Progression",
            "instructions": "Instructions",
            "status_instruction": "**Colonne Statut**: Utilisez 'X' pour marquer comme terminé, laissez vide pour incomplet",
            "notes_instruction": "**Colonne Notes**: Remplissez la progression de relecture, comme :",
            "progress_examples": [
                "Relu jusqu'à la ligne 150",
                "Style à unifier",
                "Terminé",
                "Problèmes de terminologie trouvés"
            ],
            "sorting_instruction": "**Tri des Fichiers**: Triés par chemin de fichier source par ordre alphabétique",
            "line_count_instruction": "**Comptage des Lignes**: Affiche les lignes de texte réellement traduites",
            "priority_suggestions": "Suggestions de Priorité",
            "priority_1": "**Priorité 1**: Relire {filename} en premier ({lines} lignes, plus de contenu)",
            "priority_2": "**Priorité 2**: Relire {filename} ({lines} lignes)",
            "priority_3": "**Priorité 3**: Relire {filename} ({lines} lignes)",
            "priority_4": "**Priorité 4**: Relire les autres fichiers",
            "terminology_focus": "Focus sur la Vérification Terminologique",
            "ensure_terms": "S'assurer que les termes suivants sont correctement traduits :",
            "check_accuracy": "Vérifier l'exactitude d'autres termes professionnels",
            "generated_by": "Ce fichier a été généré automatiquement par V3_Mod_Localization_Factory le {time}",
            "csv_filename": "progression_relecture.csv"
        },
        "de": {
            "title": "Korrektur-Fortschrittsboard für {mod_name} Mod-Lokalisierung",
            "status": "Status",
            "source_file": "Quelldatei",
            "localized_file": "Lokalisierte Datei",
            "translated_lines": "Übersetzte Zeilen",
            "notes": "Notizen/Fortschritt",
            "instructions": "Anweisungen",
            "status_instruction": "**Status-Spalte**: Verwenden Sie 'X' zum Markieren als abgeschlossen, leer lassen für unvollständig",
            "notes_instruction": "**Notizen-Spalte**: Füllen Sie den Korrektur-Fortschritt aus, wie z.B.:",
            "progress_examples": [
                "Korrigiert bis Zeile 150",
                "Stil muss vereinheitlicht werden",
                "Abgeschlossen",
                "Terminologie-Probleme gefunden"
            ],
            "sorting_instruction": "**Dateisortierung**: Nach Quelldateipfad alphabetisch sortiert für einfache Suche",
            "line_count_instruction": "**Zeilenzählung**: Zeigt tatsächlich übersetzte Textzeilen in jeder Datei",
            "priority_suggestions": "Prioritätsvorschläge",
            "priority_1": "**Priorität 1**: Zuerst {filename} korrigieren ({lines} Zeilen, meiste Inhalte)",
            "priority_2": "**Priorität 2**: {filename} korrigieren ({lines} Zeilen)",
            "priority_3": "**Priorität 3**: {filename} korrigieren ({lines} Zeilen)",
            "priority_4": "**Priorität 4**: Andere Dateien korrigieren",
            "terminology_focus": "Terminologie-Überprüfungsschwerpunkt",
            "ensure_terms": "Stellen Sie sicher, dass folgende Begriffe korrekt übersetzt sind:",
            "check_accuracy": "Überprüfen Sie die Genauigkeit anderer Fachbegriffe",
            "generated_by": "Diese Datei wurde automatisch von V3_Mod_Localization_Factory erstellt am {time}",
            "csv_filename": "korrektur_fortschritt.csv"
        },
        "es": {
            "title": "Tablero de Progreso de Corrección para la Localización del Mod {mod_name}",
            "status": "Estado",
            "source_file": "Archivo Fuente",
            "localized_file": "Archivo Localizado",
            "translated_lines": "Líneas Traducidas",
            "notes": "Notas/Progreso",
            "instructions": "Instrucciones",
            "status_instruction": "**Columna Estado**: Use 'X' para marcar como completado, deje vacío para incompleto",
            "notes_instruction": "**Columna Notas**: Complete el progreso de corrección, como:",
            "progress_examples": [
                "Corregido hasta la línea 150",
                "Estilo por unificar",
                "Completado",
                "Problemas de terminología encontrados"
            ],
            "sorting_instruction": "**Ordenamiento de Archivos**: Ordenados por ruta de archivo fuente alfabéticamente",
            "line_count_instruction": "**Conteo de Líneas**: Muestra las líneas de texto realmente traducidas",
            "priority_suggestions": "Sugerencias de Prioridad",
            "priority_1": "**Prioridad 1**: Corregir {filename} primero ({lines} líneas, más contenido)",
            "priority_2": "**Prioridad 2**: Corregir {filename} ({lines} líneas)",
            "priority_3": "**Prioridad 3**: Corregir {filename} ({lines} líneas)",
            "priority_4": "**Prioridad 4**: Corregir otros archivos",
            "terminology_focus": "Enfoque en Verificación Terminológica",
            "ensure_terms": "Asegúrese de que los siguientes términos estén correctamente traducidos:",
            "check_accuracy": "Verifique la precisión de otros términos profesionales",
            "generated_by": "Este archivo fue generado automáticamente por V3_Mod_Localization_Factory en {time}",
            "csv_filename": "progreso_correccion.csv"
        }
    }
    
    def __init__(self, mod_name: str, output_folder_name: str, target_lang_code: str = "zh-CN"):
        """
        初始化校对进度追踪器
        
        Args:
            mod_name: Mod名称
            output_folder_name: 输出文件夹名称
            target_lang_code: 目标语言代码，用于生成对应语言的表格
        """
        self.mod_name = mod_name
        self.output_folder_name = output_folder_name
        self.output_root = os.path.join(DEST_DIR, output_folder_name)
        self.files_data = []
        self.target_lang_code = target_lang_code
        
        # 获取语言模板，如果不存在则使用英文作为默认值
        self.lang_template = self.MULTILANG_TEMPLATES.get(
            target_lang_code, 
            self.MULTILANG_TEMPLATES["en"]
        )
        
    def add_file_info(self, file_info: Dict[str, Any]):
        """
        添加文件信息到追踪列表
        
        Args:
            file_info: 包含文件信息的字典
        """
        self.files_data.append(file_info)
        
    def generate_csv_content(self) -> str:
        """
        生成CSV格式的校对进度表格内容
        
        Returns:
            str: CSV格式的校对进度表格内容
        """
        if not self.files_data:
            logging.warning("没有文件数据，无法生成校对进度表格")
            return ""
            
        # 按文件路径排序，确保表格有序
        sorted_files = sorted(self.files_data, key=lambda x: x.get('source_path', ''))
        
        # 使用csv模块生成标准CSV格式
        import csv
        from io import StringIO
        
        output = StringIO()
        writer = csv.writer(output, quoting=csv.QUOTE_ALL)
        
        # 添加标题行
        writer.writerow([
            self.lang_template['status'],
            self.lang_template['source_file'],
            self.lang_template['localized_file'],
            self.lang_template['translated_lines'],
            self.lang_template['notes']
        ])
        
        # 添加数据行
        for file_info in sorted_files:
            source_path = file_info.get('source_path', '')
            dest_path = file_info.get('dest_path', '')
            translated_lines = file_info.get('translated_lines', 0)
            
            # 生成相对路径显示
            source_rel_path = self._get_relative_path_display(source_path)
            dest_rel_path = self._get_relative_path_display(dest_path)
            
            # 清理路径中的换行符
            source_rel_path_clean = source_rel_path.replace('\n', ' ').replace('\r', ' ')
            dest_rel_path_clean = dest_rel_path.replace('\n', ' ').replace('\r', ' ')
            
            # 写入CSV行
            writer.writerow(["", source_rel_path_clean, dest_rel_path_clean, str(translated_lines), ""])
        
        csv_content = output.getvalue()
        output.close()
        
        return csv_content
        
    def generate_markdown_content(self) -> str:
        """
        生成Markdown格式的校对进度看板内容（保留作为备选）
        
        Returns:
            str: Markdown格式的校对进度看板内容
        """
        if not self.files_data:
            logging.warning("没有文件数据，无法生成校对进度看板")
            return ""
            
        # 生成Markdown表格头部
        markdown_content = f"# {self.lang_template['title'].format(mod_name=self.mod_name)}\n\n"
        markdown_content += f"| {self.lang_template['status']} | {self.lang_template['source_file']} | {self.lang_template['localized_file']} | {self.lang_template['translated_lines']} | {self.lang_template['notes']} |\n"
        markdown_content += "| :--: | :--- | :--- | :---: | :--- |\n"
        
        # 按文件路径排序，确保表格有序
        sorted_files = sorted(self.files_data, key=lambda x: x.get('source_path', ''))
        
        for file_info in sorted_files:
            # 获取文件信息
            source_path = file_info.get('source_path', '')
            dest_path = file_info.get('dest_path', '')
            translated_lines = file_info.get('translated_lines', 0)
            
            # 生成相对路径显示
            source_rel_path = self._get_relative_path_display(source_path)
            dest_rel_path = self._get_relative_path_display(dest_path)
            
            # 生成Markdown行
            status_checkbox = "[ ]"  # 默认未选中
            markdown_line = f"| {status_checkbox} | `{source_rel_path}` | `{dest_rel_path}` | {translated_lines} | |\n"
            markdown_content += markdown_line
            
        # 添加使用说明
        markdown_content += f"\n## {self.lang_template['instructions']}\n\n"
        markdown_content += f"1. {self.lang_template['status_instruction']}\n"
        markdown_content += f"2. {self.lang_template['notes_instruction']}\n"
        
        for example in self.lang_template['progress_examples']:
            markdown_content += f"   - `{example}`\n"
            
        markdown_content += f"3. {self.lang_template['sorting_instruction']}\n"
        markdown_content += f"4. {self.lang_template['line_count_instruction']}\n\n"
        
        # 添加校对建议（如果有文件数据）
        if self.files_data:
            markdown_content += f"## {self.lang_template['priority_suggestions']}\n\n"
            
            # 按翻译行数排序，找出最大的几个文件
            sorted_by_lines = sorted(self.files_data, key=lambda x: x.get('translated_lines', 0), reverse=True)
            
            if len(sorted_by_lines) >= 1:
                file1 = sorted_by_lines[0]
                markdown_content += f"- {self.lang_template['priority_1'].format(filename=file1['filename'], lines=file1['translated_lines'])}\n"
            
            if len(sorted_by_lines) >= 2:
                file2 = sorted_by_lines[1]
                markdown_content += f"- {self.lang_template['priority_2'].format(filename=file2['filename'], lines=file2['translated_lines'])}\n"
                
            if len(sorted_by_lines) >= 3:
                file3 = sorted_by_lines[2]
                markdown_content += f"- {self.lang_template['priority_3'].format(filename=file3['filename'], lines=file3['translated_lines'])}\n"
                
            markdown_content += f"- {self.lang_template['priority_4']}\n\n"
            
            # 添加术语检查重点
            markdown_content += f"## {self.lang_template['terminology_focus']}\n\n"
            markdown_content += f"- {self.lang_template['ensure_terms']}\n"
            markdown_content += f"- {self.lang_template['check_accuracy']}\n\n"
        
        # 添加分隔线和生成信息
        markdown_content += "---\n"
        markdown_content += f"*{self.lang_template['generated_by'].format(time=self._get_current_time())}*"
        
        return markdown_content
        
    def save_proofreading_progress(self) -> bool:
        """
        保存校对进度表格到CSV文件
        
        Returns:
            bool: 是否成功保存
        """
        try:
            # 确保输出目录存在
            os.makedirs(self.output_root, exist_ok=True)
            
            # 生成CSV内容
            csv_content = self.generate_csv_content()
            if not csv_content:
                return False
                
            # 保存到CSV文件，使用UTF-8 BOM编码确保Excel等软件正确识别中文
            csv_filename = self.lang_template.get('csv_filename', 'proofreading_progress.csv')
            output_file_path = os.path.join(self.output_root, csv_filename)
            
            # 使用UTF-8 BOM编码，确保Excel等软件能正确显示中文
            with open(output_file_path, "w", encoding="utf-8-sig", newline='') as f:
                f.write(csv_content)
            
            # 同时生成一个GBK编码的版本，用于Excel直接打开
            gbk_filename = csv_filename.replace('.csv', '_GBK.csv')
            gbk_output_path = os.path.join(self.output_root, gbk_filename)
            
            try:
                with open(gbk_output_path, "w", encoding="gbk", newline='') as f:
                    f.write(csv_content)
                logging.info(f"GBK编码版本已生成: {gbk_output_path}")
            except Exception as gbk_error:
                logging.warning(f"GBK编码版本生成失败: {gbk_error}")
                
            logging.info(f"校对进度表格已生成: {output_file_path}")
            return True
            
        except Exception as e:
            logging.error(f"生成校对进度表格失败: {e}")
            return False
            
    def _get_relative_path_display(self, full_path: str) -> str:
        """
        获取相对路径显示格式
        
        Args:
            full_path: 完整文件路径
            
        Returns:
            str: 相对路径显示字符串
        """
        if not full_path:
            return ""
            
        try:
            # 尝试相对于输出根目录的路径
            if full_path.startswith(self.output_root):
                rel_path = os.path.relpath(full_path, self.output_root)
                return rel_path
                
            # 如果是绝对路径，尝试相对于工作目录
            if os.path.isabs(full_path):
                rel_path = os.path.relpath(full_path, os.getcwd())
                return rel_path
                
            # 如果已经是相对路径，直接返回
            return full_path
            
        except Exception:
            # 如果路径处理失败，返回文件名
            return os.path.basename(full_path)
            
    def _get_current_time(self) -> str:
        """
        获取当前时间字符串
        
        Returns:
            str: 格式化的当前时间
        """
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def create_proofreading_tracker(mod_name: str, output_folder_name: str, target_lang_code: str = "zh-CN") -> ProofreadingTracker:
    """
    创建校对进度追踪器的工厂函数
    
    Args:
        mod_name: Mod名称
        output_folder_name: 输出文件夹名称
        target_lang_code: 目标语言代码，用于生成对应语言的表格
        
    Returns:
        ProofreadingTracker: 校对进度追踪器实例
    """
    return ProofreadingTracker(mod_name, output_folder_name, target_lang_code)
